{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\r\n\r\ninterface IProperties {\r\n\tstartDirs?: string[],\r\n\theaderText: string[],\r\n\tfileTypes: string[],\r\n\tignoreItems: string[]\r\n}\r\n\r\n// Run this when the extension is activated\r\nconst activate = async (ctx: vscode.ExtensionContext) => {\r\n\tconst { workspace, Uri, commands, window } = vscode;\r\n\r\n\t// Run this when the user runs this command\r\n\tconst addHeadersCMD = commands.registerCommand(\"vscode-header-plugin.add-headers-to-files\", async (cmdArg: any[]) => {\r\n\t\tconst { fs, rootPath } = workspace;\r\n\r\n\t\tif (!rootPath) {\r\n\t\t\twindow.showInformationMessage('Failed to insert textblocks: No open workspace', { modal: false });\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst root = (cmdArg && cmdArg[0]) || rootPath;\r\n\t\tconst configFilePath = (cmdArg && cmdArg[1]) || `${root}/headerConfig.json`;\r\n\r\n\t\t// Work with the plugin's config file\r\n\t\tconst configFileUri: vscode.Uri = Uri.file(configFilePath);\r\n\t\tconst configFile = await fs.readFile(configFileUri);\r\n\t\tconst decodedFile: string = new TextDecoder().decode(configFile);\r\n\r\n\t\t// Decode file and get the settings\r\n\t\tlet properties: IProperties = JSON.parse(decodedFile);\r\n\t\tconst headerTextBlock: string = properties.headerText.join(\"\\n\");\r\n\t\tconst { fileTypes, startDirs, ignoreItems } = properties;\r\n\t\tconst ignoreItemsFullPaths = ignoreItems.map((item) => `${root}/${item}`);\r\n\r\n\t\t// Start looping through the folders in recursion, starting from startPath\r\n\t\tconst dive = async (startDir?: string): Promise<void> => {\r\n\t\t\t// Read the directory and return all items (sub directories and files) in it\r\n\t\t\tconst fullStartDirPath = startDir ? (root + \"/\" + startDir) : root;\r\n\t\t\tconst srcURI: vscode.Uri = Uri.file(fullStartDirPath || root || \"\");\r\n\t\t\tconst items = await workspace.fs.readDirectory(srcURI);\r\n\r\n\t\t\t// Loop through the folder's items\r\n\t\t\titems.forEach(async (item, i) => {\r\n\t\t\t\t// item: [string, enum], e.g. [\"extension.ts\", 1], which means extension.ts is a file\r\n\t\t\t\t// See: https://code.visualstudio.com/api/references/vscode-api#FileType\r\n\r\n\t\t\t\tconst itemName = item[0];\r\n\t\t\t\tconst typeEnum = item[1];\r\n\r\n\t\t\t\t// Mandatory ignore these items\r\n\t\t\t\tconst ignore = [\r\n\t\t\t\t\t\"node_modules\",\r\n\t\t\t\t\t\".git\",\r\n\t\t\t\t];\r\n\r\n\t\t\t\t// If the current item's path equals either those listed in mandatory list above, or the ignoreItems\r\n\t\t\t\t// property in the config file, then proceed to the next iteration\r\n\t\t\t\tif (ignoreItemsFullPaths.includes(String.raw`${fullStartDirPath}/${itemName}`) || ignore.includes(itemName)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (typeEnum === 1) {\r\n\t\t\t\t\t// This is a file\r\n\r\n\t\t\t\t\t// Proceed with this file if its extension matches this regex\r\n\t\t\t\t\t// const extRegex = /^.*\\.(ts|js|tsx|jsx|css|scss|txt)$/;\r\n\t\t\t\t\tconst fileTypesString = fileTypes.join(\"|\");\r\n\t\t\t\t\tconst extRegex = new RegExp(`^.*\\.(${fileTypesString})$`);\r\n\r\n\t\t\t\t\tif (itemName.match(extRegex)) {\r\n\t\t\t\t\t\t// The file type matches those stated in the config file,\r\n\t\t\t\t\t\t// start the writing process and insert the text block at the top of the file\r\n\t\t\t\t\t\tconst fileUri: vscode.Uri = Uri.file(`${fullStartDirPath}/${itemName}`);\r\n\t\t\t\t\t\tconst fileContents = await workspace.fs.readFile(fileUri);\r\n\r\n\t\t\t\t\t\tconst contentsAsString = new TextDecoder().decode(fileContents);\r\n\t\t\t\t\t\tconst updatedFileContents = `${headerTextBlock}\\n\\n\\n${contentsAsString}`;\r\n\r\n\t\t\t\t\t\tconst encodedContents = new TextEncoder().encode(updatedFileContents);\r\n\t\t\t\t\t\tawait workspace.fs.writeFile(fileUri, encodedContents);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (typeEnum === 2) {\r\n\t\t\t\t\t// This is a directory\r\n\t\t\t\t\t// Continue the recursion\r\n\r\n\t\t\t\t\tawait dive(`${startDir}/${itemName}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If the last item in startDirs has the filename \"itemName\", then show this message\r\n\t\t\t\tif (startDirs && startDirs[startDirs.length - 1] === itemName) {\r\n\t\t\t\t\twindow.showInformationMessage('Textblocks have been added to targetted files', { modal: false });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tif (startDirs && startDirs.length > 0) {\r\n\t\t\tstartDirs.forEach((dir) => dive(dir));\r\n\t\t} else {\r\n\t\t\tdive(\"\");\r\n\r\n\t\t}\r\n\t\twindow.showInformationMessage('Textblocks have been added to targetted files', { modal: false });\r\n\t});\r\n\r\n\tctx.subscriptions.push(addHeadersCMD);\r\n}\r\n\r\n// This method is called when your extension is deactivated\r\nexport {\r\n\tactivate\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAwB;AAUxB,IAAM,WAAW,OAAO,QAAiC;AACxD,QAAM,EAAE,WAAW,KAAK,UAAU,OAAO,IAAI;AAG7C,QAAM,gBAAgB,SAAS,gBAAgB,6CAA6C,OAAO,WAAkB;AACpH,UAAM,EAAE,IAAI,SAAS,IAAI;AAEzB,QAAI,CAAC,UAAU;AACd,aAAO,uBAAuB,kDAAkD,EAAE,OAAO,MAAM,CAAC;AAChG;AAAA,IACD;AAEA,UAAM,OAAQ,UAAU,OAAO,CAAC,KAAM;AACtC,UAAM,iBAAkB,UAAU,OAAO,CAAC,KAAM,GAAG;AAGnD,UAAM,gBAA4B,IAAI,KAAK,cAAc;AACzD,UAAM,aAAa,MAAM,GAAG,SAAS,aAAa;AAClD,UAAM,cAAsB,IAAI,YAAY,EAAE,OAAO,UAAU;AAG/D,QAAI,aAA0B,KAAK,MAAM,WAAW;AACpD,UAAM,kBAA0B,WAAW,WAAW,KAAK,IAAI;AAC/D,UAAM,EAAE,WAAW,WAAW,YAAY,IAAI;AAC9C,UAAM,uBAAuB,YAAY,IAAI,CAAC,SAAS,GAAG,QAAQ,MAAM;AAGxE,UAAM,OAAO,OAAO,aAAqC;AAExD,YAAM,mBAAmB,WAAY,OAAO,MAAM,WAAY;AAC9D,YAAM,SAAqB,IAAI,KAAK,oBAAoB,QAAQ,EAAE;AAClE,YAAM,QAAQ,MAAM,UAAU,GAAG,cAAc,MAAM;AAGrD,YAAM,QAAQ,OAAO,MAAM,MAAM;AAIhC,cAAM,WAAW,KAAK,CAAC;AACvB,cAAM,WAAW,KAAK,CAAC;AAGvB,cAAM,SAAS;AAAA,UACd;AAAA,UACA;AAAA,QACD;AAIA,YAAI,qBAAqB,SAAS,OAAO,MAAM,oBAAoB,UAAU,KAAK,OAAO,SAAS,QAAQ,GAAG;AAC5G;AAAA,QACD;AAEA,YAAI,aAAa,GAAG;AAKnB,gBAAM,kBAAkB,UAAU,KAAK,GAAG;AAC1C,gBAAM,WAAW,IAAI,OAAO,QAAS,mBAAmB;AAExD,cAAI,SAAS,MAAM,QAAQ,GAAG;AAG7B,kBAAM,UAAsB,IAAI,KAAK,GAAG,oBAAoB,UAAU;AACtE,kBAAM,eAAe,MAAM,UAAU,GAAG,SAAS,OAAO;AAExD,kBAAM,mBAAmB,IAAI,YAAY,EAAE,OAAO,YAAY;AAC9D,kBAAM,sBAAsB,GAAG;AAAA;AAAA;AAAA,EAAwB;AAEvD,kBAAM,kBAAkB,IAAI,YAAY,EAAE,OAAO,mBAAmB;AACpE,kBAAM,UAAU,GAAG,UAAU,SAAS,eAAe;AAAA,UACtD;AAAA,QAED,WAAW,aAAa,GAAG;AAI1B,gBAAM,KAAK,GAAG,YAAY,UAAU;AAAA,QACrC;AAGA,YAAI,aAAa,UAAU,UAAU,SAAS,CAAC,MAAM,UAAU;AAC9D,iBAAO,uBAAuB,iDAAiD,EAAE,OAAO,MAAM,CAAC;AAAA,QAChG;AAAA,MACD,CAAC;AAAA,IACF;AAEA,QAAI,aAAa,UAAU,SAAS,GAAG;AACtC,gBAAU,QAAQ,CAAC,QAAQ,KAAK,GAAG,CAAC;AAAA,IACrC,OAAO;AACN,WAAK,EAAE;AAAA,IAER;AACA,WAAO,uBAAuB,iDAAiD,EAAE,OAAO,MAAM,CAAC;AAAA,EAChG,CAAC;AAED,MAAI,cAAc,KAAK,aAAa;AACrC;",
  "names": []
}
